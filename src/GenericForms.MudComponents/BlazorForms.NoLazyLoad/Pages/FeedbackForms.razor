@page "/forms/feedback"

@inject HttpClient Http

@* BreadCrum Initialization Code - Start *@
<MudBreadcrumbs Items="_items"></MudBreadcrumbs>

@code {

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("General Forms", href: "/",
            icon: Icons.Material.Outlined.DynamicForm),

        new BreadcrumbItem("Feedback Form",
            icon: Icons.Material.Outlined.Person, disabled: false,
            href: "/feedback-form"),
    };

}

@* Blazro Form - Start *@
@if (_headerProperty is not null && formsInputs is not null)
{
    <DynamicMudForm OnSubmit="SubmitEventInvoke" 
                    HeaderProperty="_headerProperty" ValidationFuncList="_ValidationFuncList"
                    FormBuilderInput="@formsInputs"/>
    Console.WriteLine("Customer Registry Dynamic - Form");
}
else
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px"/>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudSkeleton Animation="Animation.Wave" Width="40%"/>
                <MudSkeleton Animation="Animation.Wave" Width="60%"/>
            </CardHeaderContent>
        </MudCardHeader>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="250px"/>
        <MudCardContent>
            <MudSkeleton Animation="Animation.Wave"/>
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-2 mb-2"/>
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-3 mb-2"/>
        </MudCardActions>
    </MudCard>
}


@* Initialization Event Handler *@

@code
{
    public FormProperty _headerProperty;
    private FormBuilderInputs[]? formsInputs;
    public IDictionary<string, Func<string, IEnumerable<string>>> _ValidationFuncList = new Dictionary<string, Func<string, IEnumerable<string>>>();
    protected override async Task OnInitializedAsync()
    {
        formsInputs = await Http.GetFromJsonAsync<FormBuilderInputs[]>("forms/feedback.json");
        Console.WriteLine($"Form Input: {formsInputs.Length} ");
        _headerProperty = new FormProperty()
        {
            EnableCard = true,
            Title = "Feedback",
            TitleDivider = true,
            SubTitle = "Get in touch with our expert.",
            CardHeaderAvatar = new CardAvatar()
            {
                Icons = @Icons.Material.Filled.DynamicFeed,
                Color = Color.Primary,
                Variant = Variant.Filled,
                IsEnable = true,
            },
            CardHeaderAction = new CardAction()
            {
                Icons = Icons.Material.Filled.Settings,
                Color = Color.Default,
                CardHeaderTrigger = CardHeaderTrigger
            }
        };
        //Forms to validate with custom method.
        _ValidationFuncList.Add("Name", MaxCharacters);
    }
    private  IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return "Max 25 characters";
    }
}

@* Button Action Event Handler - Start *@
@code
{
    private async Task? CardHeaderTrigger()
    {
        Console.WriteLine("Icon Clicked From CArd Header");
    }

    public void SubmitEventInvoke(string jsonData)
    {
        Console.WriteLine($"Json Data Returned : {jsonData}");
    }
}