@page "/forms/academy/{QueryParam}/{Title}"

@using Blazor.UI.FormGenerator
@using Blazor.UI.FormGenerator.Builders
@inject HttpClient Http

@code
{
    [Parameter] public string QueryParam { get; set; }
    [Parameter] public string Title { get; set; }
}

@* BreadCrum Initialization Code - Start *@
<MudBreadcrumbs Items="_items" />

@code {

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("General Forms", href: "/",
            icon: Icons.Material.Outlined.DynamicForm),

        new BreadcrumbItem("Feedback Form",
            icon: Icons.Material.Outlined.Person, disabled: false,
            href: "/feedback-form"),
    };

}

@* Blazor Form - Start  ValidationFuncList="_ValidationFuncList" HeaderProperty="_headerProperty" *@
@if (_headerProperty is not null && formsHeaderInputs is not null)
{
    <DynamicMudForm Title="Admission Header" HeaderProperty="_headerProperty"  FormBuilderInput="@formsHeaderInputs"/>
    Console.WriteLine("Customer Academy Title - Form");
}
else
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px"/>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudSkeleton Animation="Animation.Wave" Width="40%"/>
                <MudSkeleton Animation="Animation.Wave" Width="60%"/>
            </CardHeaderContent>
        </MudCardHeader>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="250px"/>
        <MudCardContent>
            <MudSkeleton Animation="Animation.Wave"/>
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-2 mb-2"/>
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-3 mb-2"/>
        </MudCardActions>
    </MudCard>
}

@if (formEnrolment is not null)
{
<DynamicMudForm Title="Student Enrolment" HeaderProperty="_enrolmentProperty"  FormBuilderInput="@formEnrolment"/>
Console.WriteLine("Customer Academy Title - Form");
}

@* Initialization Event Handler *@

@code
{
    public FormProperty _headerProperty;
    private FormBuilderInputs[]? formsHeaderInputs;
    public FormProperty _enrolmentProperty;
    private FormBuilderInputs[]? formEnrolment;
    public IDictionary<string, Func<string, IEnumerable<string>>> _ValidationFuncList = new Dictionary<string, Func<string, IEnumerable<string>>>();

    protected override async Task OnInitializedAsync()
    {
        formsHeaderInputs = await Http.GetFromJsonAsync<FormBuilderInputs[]>("forms/student/enrolment-header.json");
        Console.WriteLine($"Form Input: {formsHeaderInputs.Length} ");
        _headerProperty = new FormProperty()
        {
            EnableCard = false,
            Title = "Feedback",
            TitleDivider = false,
            SubTitle = "Get in touch with our expert.",
            CardHeaderAvatar = new CardAvatar()
            {
                Icons = @Icons.Material.Filled.DynamicFeed,
                Color = Color.Primary,
                Variant = Variant.Filled,
                IsEnable = true,
            },
            CardHeaderAction = new CardAction()
            {
                Icons = Icons.Material.Filled.Settings,
                Color = Color.Default,
                CardHeaderTrigger = CardHeaderTrigger
            },
            CardSettings = new CardSettings()
            {
                Elevation = 2,
                Outlined = false,
                FooterSettings = new FooterSettings()
                {
                    EnableFooter = false
                }
            }
            
        };
        
        formEnrolment = await Http.GetFromJsonAsync<FormBuilderInputs[]>("forms/student/"+ QueryParam +".json");
        Console.WriteLine($"Form Input: {formEnrolment.Length} ");
        
        _enrolmentProperty = new FormProperty()
        {
            EnableCard = true,
            Title = "Student Details",
            TitleDivider = true,
            SubTitle = "Student General Details",
            CardHeaderAvatar = new CardAvatar()
            {
                Icons = @Icons.Material.Filled.PersonAdd,
                Color = Color.Primary,
                Variant = Variant.Outlined,
                IsEnable = true,
            },
            CardHeaderAction = new CardAction()
            {
                Icons = Icons.Material.Filled.Settings,
                Color = Color.Default,
                CardHeaderTrigger = CardHeaderTrigger
            },
            CardSettings = new CardSettings()
            {
                Elevation = 0,
                Outlined = true,
                FooterSettings = new FooterSettings()
                {
                    EnableFooter = false
                }
            }
            
        };
        //Forms to validate with custom method.
        _ValidationFuncList.Add("AdmissionNo", MaxCharacters);
    }

    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return "Max 25 characters";
    }
}

@* Button Action Event Handler - Start *@

@code
{
    private async Task? CardHeaderTrigger()
    {
        Console.WriteLine("Icon Clicked From CArd Header");
    }

    public void SubmitEventInvoke(string jsonData)
    {
        Console.WriteLine($"Json Data Returned : {jsonData}");
    }
}