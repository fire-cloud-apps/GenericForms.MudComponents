@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using MudBlazor;

<MudCard 
    Elevation="@(HeaderProperty != null ? HeaderProperty.CardSettings.Elevation : 0)" 
    Outlined="@(HeaderProperty != null ? HeaderProperty.CardSettings.Outlined : true)" 
    Class="@(HeaderProperty != null ? HeaderProperty.CardSettings.CustomClass : "ma-4")" >

    @if (HeaderProperty is not null)
    {
        @if (HeaderProperty.EnableCard)
        {
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="@HeaderProperty.CardHeaderAvatar.Color" 
                               Variant="@HeaderProperty.CardHeaderAvatar.Variant">
                        <MudIcon Icon="@HeaderProperty.CardHeaderAvatar.Icons"/>
                    </MudAvatar>
                </CardHeaderAvatar>
                
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">@HeaderProperty.Title </MudText>
                    <MudText Typo="Typo.body2">@HeaderProperty.SubTitle</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@HeaderProperty.CardHeaderAction.Icons"
                                   OnClick="@HeaderProperty.CardHeaderAction.CardHeaderTrigger"
                                   Color="@HeaderProperty.CardHeaderAction.Color"/>
                </CardHeaderActions>
            </MudCardHeader>
        }
    }
    <MudCardContent>
        @if (HeaderProperty is not null)
        {
            @if (HeaderProperty.TitleDivider)
            {
                <MudDivider/>
            }
        }
        <MudForm @ref="_form" @bind-IsValid="@success" @bind-Errors="@errors">

            <MudGrid Spacing="2">
                @if (FormBuilderInput is not null)
                {
                    foreach (var field in FormBuilderInput)
                    {
                        <MudItem xs="@field.GridPosition.xs" sm="@field.GridPosition.sm" md="@field.GridPosition.md" lg="@field.GridPosition.lg">
                            @switch (field.InputType)
                            {
                                case InputFieldType.Text:
                                default:
                                    <MudTextField @bind-Value="formData[field.FieldName]"
                                                  Mask="@(field.PatternMask != null ? new PatternMask(field.PatternMask) : null)"
                                                  Validation="@(ValidationFuncList.ContainsKey(field.FieldName) ? ValidationFuncList[field.FieldName] : null )"
                                                  Label="@field.Label"
                                                  ReadOnly="@field.IsReadOnly"
                                                  Required="@field.Validation.IsRequired"
                                                  RequiredError="@field.Validation.RequiredError"
                                                  Variant="@field.Variant">
                                    </MudTextField>
                                    break;
                                case InputFieldType.MultiLine:
                                    <MudTextField @bind-Value="formData[field.FieldName]"
                                                  Required="@field.Validation.IsRequired"
                                                  ReadOnly="@field.IsReadOnly"
                                                  RequiredError="@field.Validation.RequiredError"
                                                  Lines="@field.Line" Label="@field.Label" Variant="@field.Variant">
                                    </MudTextField>
                                    break;
                                case InputFieldType.Email:
                                    <MudTextField @bind-Value="formData[field.FieldName]"
                                                  InputType="InputType.Email"
                                                  ReadOnly="@field.IsReadOnly"
                                                  Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"
                                                  Label="@field.Label" Variant="@field.Variant">
                                    </MudTextField>
                                    break;
                                case InputFieldType.Numeric:
                                    <MudNumericField @bind-Value="formDataNumeric[field.FieldName]"
                                                     ReadOnly="@field.IsReadOnly"
                                                     Label="@field.Label" Variant="@field.Variant"/>
                                    break;
                                case InputFieldType.Radio:
                                    <MudRadioGroup @bind-Value="formData[field.FieldName]" ReadOnly="@field.IsReadOnly">
                                        @foreach (var item in @field.SelectItemList)
                                        {
                                            <MudRadio Value="item.Value">@item.Text</MudRadio>
                                            //Console.WriteLine($"Radio Value: {item.Value}, Text: {item.Text}");
                                        }
                                    </MudRadioGroup>
                                    break;
                                case InputFieldType.Select:
                                    <MudSelect T="string" Label="@field.Label" Variant="@field.Variant"
                                               ReadOnly="@field.IsReadOnly"
                                               @bind-Value="formData[field.FieldName]">
                                        @foreach (var item in @field.SelectItemList)
                                        {
                                            <MudSelectItem Value="item.Value">@item.Text</MudSelectItem>
                                            //Console.WriteLine($"Selected Value: {item.Value}, Text: {item.Text}");
                                        }
                                    </MudSelect>
                                    break;
                                case InputFieldType.DateTime:
                                    <MudTextField Format="s"
                                                  @bind-Value="formDataDateTime[field.FieldName]"
                                                  Label="@field.Label" ReadOnly="@field.IsReadOnly"
                                                  InputType="InputType.DateTimeLocal"/>


                                    @* <MudDatePicker Label="@field.Label" @key="field.Id" *@
                                    @*                @bind-Value="formDataDateTime[field.FieldName]" *@
                                    @*                Variant="@field.Variant" />  *@

                                    @*  MudDatePicker does not works with Lazy Loading/Dynamic loading.. *@

                                    break;
                                case InputFieldType.Date:
                                    <MudTextField Format="yyyy-MM-dd" ReadOnly="@field.IsReadOnly"
                                                  @bind-Value="formDataDateTime[field.FieldName]"
                                                  Label="@field.Label"
                                                  InputType="InputType.Date"/>

                                    @*  MudDatePicker does not works with Lazy Loading/Dynamic loading.. *@
                                    break;
                                case InputFieldType.Time:
                                    <MudTextField @bind-Value="formData[field.FieldName]"
                                                  Label="@field.Label" ReadOnly="@field.IsReadOnly"
                                                  InputType="InputType.Time"/>
                                    break;
                                case InputFieldType.Password:
                                    <MudTextField @bind-Value="formData[field.FieldName]"
                                                  ReadOnly="@field.IsReadOnly"
                                                  Label="@field.Label" Variant="@field.Variant" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="PasswordToggle" AdornmentAriaLabel="Show Password"/>
                                    break;
                                case InputFieldType.CheckBox:
                                    <MudCheckBox @bind-Value="formDataBool[field.FieldName]"
                                                 ReadOnly="@field.IsReadOnly"
                                                 Label="@field.Label" />
                                    break;
                                case InputFieldType.Switch:
                                    <MudSwitch @bind-Value="formDataBool[field.FieldName]"
                                               ReadOnly="@field.IsReadOnly"
                                               Label="@field.Label" />
                                    break;
                                case InputFieldType.AutoComplete:
                                    <MudAutocomplete T="string" @bind-Value="formData[field.FieldName]"
                                                     ResetValueOnEmptyText="true"
                                                     SearchFunc="@AutoCompleteFuncList[field.FieldName]"
                                                     Label="@field.Label" ReadOnly="@field.IsReadOnly"/>
                                    break;
                                case InputFieldType.Title:
                                    <div class="@("d-flex " + @field.TileAlign + " flex-grow-1 gap-2")">
                                        <MudText Typo="@field.TextStyle">@field.Label</MudText>
                                    </div>
                                    break;
                                case InputFieldType.Divider:
                                    <MudDivider Class="ma-2"/>
                                    break;
                                case InputFieldType.FileUpload:
                                    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                                   Accept="@field.FileAllowed" FilesChanged="FileUpload" aximumFileCount="10">
                                        <ActivatorContent>
                                            <MudButton Variant="@field.Variant"
                                                       StartIcon="@Icons.Material.Filled.AttachFile">
                                                @($"Upload Files ({FileLists.Count})")
                                            </MudButton>
                                        </ActivatorContent>
                                    </MudFileUpload>
                                    break;
                                case InputFieldType.Alert:
                                    <div class="@("d-flex " + @field.TileAlign + " flex-grow-1 gap-2")">
                                        <MudAlert Severity="@field.Severity"
                                                  Variant="@field.Variant">
                                            @field.Label
                                        </MudAlert>
                                    </div>
                                    break;

                            }
                        </MudItem>
                    }
                }
                else
                {
                    <MudText>No Form Content available</MudText>
                }

            </MudGrid>
        </MudForm>

    </MudCardContent>

    @if (HeaderProperty is not null )
    {
        @if (HeaderProperty.CardSettings.FooterSettings.EnableFooter)
        {
            <MudCardActions>
                <div class="d-flex justify-end flex-grow-1 gap-2">
                    @if (HeaderProperty.CardSettings.FooterSettings.Cancel)
                    {
                        <MudButton Class="ma-4"
                                   Variant="Variant.Text"
                                   Color="Color.Default"
                                   OnClick="@(async (e) => await Cancel())">
                            @HeaderProperty.CardSettings.FooterSettings.CancelText
                        </MudButton>
                    }
                    @if (HeaderProperty.CardSettings.FooterSettings.Submit)
                    {
                        <MudButton Class="ma-4" Type="Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Default"
                                   OnClick="@(async (e) => await SubmitClick_HandlerAsync(e, ""))">
                            @HeaderProperty.CardSettings.FooterSettings.SubmitText
                        </MudButton>
                    }
                    
                </div>

            </MudCardActions>
        }
    }

</MudCard>