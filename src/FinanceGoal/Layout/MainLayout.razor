@using FinanceGoal.Helper
@using System.Security.Claims
@inherits LayoutComponentBase

@inject ISupabaseAuthService AuthService
@inject CustomAuthStateProvider AuthStateProvider

<MudThemeProvider IsDarkMode="true" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>

    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        Finance Goal 
        <MudSpacer />
        <MudMenu Label="User Details" Color="Color.Secondary" Size="Size.Medium" Variant="Variant.Text"
                 StartIcon="@Icons.Material.Filled.Person"
                 AriaLabel="Open user menu">
            <MudMenuItem Label="Profile" />
            <MudMenuItem Label="My account" />
            <MudMenuItem Label="Logout" OnClick="@((e) => Logout())" />
        </MudMenu>

        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit"   />
    </MudAppBar>

    <MudDrawer @bind-Open="@_drawerOpen" Elevation="2">
        <MudDrawerHeader>

            <MudText Typo="Typo.h5" Class="mt-1">Finance Value</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task Logout()
    {
        var token = await LocalStorage.GetItemAsync<string>("access_token");
        if (!string.IsNullOrEmpty(token))
            await AuthService.SignOutAsync(token);
        await AuthStateProvider.MarkUserAsLoggedOut();

        NavigationManager.NavigateTo("/auth/login");
    }

    // private async Task<string> GetUserEmail()
    // {
    //     var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     return authState.User.FindFirst(ClaimTypes.Email)?.Value;
    // }
}
