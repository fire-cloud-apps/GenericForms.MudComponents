<MudTextField @bind-Value="FormData"
              Placeholder="@Fields.Placeholder"
              Required="@Fields.Validation.IsRequired"
              RequiredError="@Fields.Validation.RequiredError"
              Validation="@Fields.Validation.Method"
              ReadOnly="@Fields.IsReadOnly"
              Label="@Fields.Label" Variant="@Fields.Variant"
              InputType="@_passwordInput"
              MaxLength="@Fields.MaxLength"
              HelperText="@Fields.HelperText"
              HelperTextOnFocus="@Fields.HelperTextOnFocus"
              Adornment="Adornment.End"
              AdornmentIcon="@_passwordInputIcon"
              OnAdornmentClick="PasswordToggle" 
              AdornmentAriaLabel="Show Password" />


@code 
{

    [Parameter]
    public required Field? Fields { get; set; }


    #region Binding Form Data As String

    private string? CurrentValue { get; set; }
    [Parameter]
    public required string? FormData
    {
        get => CurrentValue;
        set
        {
            if (CurrentValue != value)
            {
                CurrentValue = value;
                FormDataChanged.InvokeAsync(CurrentValue);
            }
        }
    }

    [Parameter]
    public EventCallback<string?> FormDataChanged { get; set; }

    #endregion

    #region Toggle Password
    bool _isShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void PasswordToggle()
    {
        if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }
    #endregion
}
