@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using Blazor.UI.FormGenerator.Components

@inject ILogger<DynamicMudForm> Logger

@* @(ValidationFuncList.ContainsKey(field.FieldName) ? ValidationFuncList[field.FieldName] : null) *@
<MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
    
<MudGrid Spacing="0">
    @if (FormBuilders is not null)
    {
        foreach (var card in FormBuilders)
        {
            <MudItem xs="@card.GridPosition.xs"
                     sm="@card.GridPosition.sm"
                     md="@card.GridPosition.md"
                     lg="@card.GridPosition.lg">

                <MudCard Style="@card.Style"
                    Elevation="@card.Elevation"
                    Outlined="@card.Outlined"
                    Class="@card.Class">

                    @if (card.Header.Enable)
                    {
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                @if (card.Header.Avatar.Enable)
                                {
                                    <MudAvatar Color="@card.Header.Avatar.Color"
                                               Variant="@card.Header.Avatar.Variant">
                                        <MudIcon Icon="@card.Header.Avatar.Icon"/>
                                    </MudAvatar>
                                }
                            </CardHeaderAvatar>

                            <CardHeaderContent>
                                @if (card.Header.Content.Enable)
                                {
                                    <MudText Typo="Typo.body1">@card.Header.Content.Title </MudText>
                                    <MudText Typo="Typo.body2">@card.Header.Content.SubTitle</MudText>
                                }
                            </CardHeaderContent>

                            <CardHeaderActions>
                                @if (card.Header.CardAction.Enable)
                                {
                                    <MudIconButton Icon="@card.Header.CardAction.Icon"
                                                   OnClick="@card.Header.CardAction.ActionTrigger"
                                                   Color="@card.Header.CardAction.Color"/>
                                }
                            </CardHeaderActions>
                        </MudCardHeader>
                    }

                    <MudCardContent>
                        
                        @if (card.Header.Divider)
                        {
                            <MudDivider Class="mb-2"/>
                        }
                        
                        
                        <MudGrid Spacing="@card.Spacing">
                                @foreach (var field in card.Fields)
                                {
                                    <MudItem xs="@field.GridPosition.xs"
                                             sm="@field.GridPosition.sm"
                                             md="@field.GridPosition.md"
                                             lg="@field.GridPosition.lg">

                                        @switch (field.InputType)
                                        {
                                            case InputFieldType.Text:
                                            default:
                                                <DynamicText @bind-FormData="@_formData[field.FieldName]" Fields="@field" />                                                
                                                break;
                                            case InputFieldType.MultiLine:
                                                <DynamicMultiLine @bind-FormData="@_formData[field.FieldName]" Fields="@field" />
                                                break;
                                            case InputFieldType.Email:
                                                <DynamicEmail  @bind-FormData="@_formData[field.FieldName]" Fields="@field" />                                               
                                                break;
                                            case InputFieldType.Numeric:
                                                <DynamicNumber Fields="@field"
                                                               @bind-FormData="@_formDataNumeric[field.FieldName]" />
                                                break;
                                            case InputFieldType.Radio:
                                                <DynamicRadio 
                                                    Fields="@field" @bind-FormData="_formData[field.FieldName]" />
                                                break;
                                            case InputFieldType.ChipSet:
                                                <DynamicChip Fields="@field"
                                                             @bind-FormData="@_formData[field.FieldName]" />
                                                break;
                                            case InputFieldType.ChipSets:
                                                <DynamicChipSets Fields="@field"
																 @bind-FormData="@_formReadOnlySelectData[field.FieldName]" />
                                                
                                                break;
                                            case InputFieldType.Select:
												<DynamicSelection Fields="@field"
																  @bind-FormData="@_formData[field.FieldName]" />
                                                break;
                                          
                                            case InputFieldType.DateTime:
                                                <DynamicDateTime Fields="@field"
																 @bind-FormData="@_formDataDateTime[field.FieldName]" />

                                                break;
                                            case InputFieldType.Date:
                                                <DynamicDate Fields="@field" 
                                                    @bind-FormData="@_formDataDateTime[field.FieldName]" />
                                                break;
                                            case InputFieldType.Time:
                                                <DynamicTime Fields="@field"
                                                             @bind-FormData="@_formDataDateTime[field.FieldName]" />
                                                break;
                                            case InputFieldType.Password:
												<DynamicPassword @bind-FormData="@_formData[field.FieldName]" Fields="@field" />                                                
                                                break;
                                            case InputFieldType.CheckBox:
												<DynamicCheckBox @bind-FormData="_formDataBool[field.FieldName]" Fields="@field" />
                                                break;
                                            case InputFieldType.Switch:
                                                <DynamicSwitch @bind-FormData="_formDataBool[field.FieldName]" Fields="@field" />                                                   
                                                break;
                                            case InputFieldType.AutoComplete:
                                                <DynamicAutoComplete @bind-FormData="_formData[field.FieldName]" Fields="@field" />                                               
                                                break;
                                            case InputFieldType.Title:
                                                <div class="@("d-flex " + @field.TitleAlign + " flex-grow-1 gap-2")">
                                                    <MudText Typo="@field.TextStyle">@field.Label</MudText>
                                                </div>
                                                break;
                                            case InputFieldType.Divider:
                                                <MudDivider Class="ma-2"/>
                                                break;
                                            case InputFieldType.FileUpload:
                                                <DynamicFileUpload Fields="@field" GlobalBuilderSettings="@GlobalBuilderSettings" />
                                                break;
                                            case InputFieldType.Alert:
                                                <div class="@("d-flex " + @field.TitleAlign + " flex-grow-1 gap-2")">
                                                    <MudAlert Severity="@field.Severity"
                                                              Variant="@field.Variant">
                                                        @field.Label
                                                    </MudAlert>
                                                </div>
                                                
                                                break;
                                            case InputFieldType.Field:
                                                <MudField Label="@field.Label"
                                                          Variant="@field.Variant" >
                                                    @field.Label
                                                </MudField>
                                                break;
                                            case InputFieldType.Link:
                                                <MudLink Href="@field.Href" Target="@field.Target"
                                                          Underline="@field.Underline" >
                                                    @field.Label
                                                </MudLink>
                                                break;   
                                            case InputFieldType.Image:
                                                <MudImage Fluid="@field.Fluid"
                                                          Src="@field.ImageSrc" Width="@field.Width"
                                                          Height="@field.Height"
                                                          Alt="@field.Alt" Class="@field.Class"/>
                                                break;
                                            case InputFieldType.ColorCompact:
                                                <MudColorPicker Label="@field.Label" ColorPickerView="ColorPickerView.GridCompact" />
                                                break;
                                            @* case InputFieldType.Custom:
                                                Future we can use 'RenderFragment'
                                                break; *@
                                        }
                                    </MudItem>
                                }
                            </MudGrid>
                        
                    </MudCardContent>

                    @if (card.Footer.Enable)
                    {
                        <MudCardActions>
                            <div class="@card.Footer.CustomClass">
                                @if (card.Footer.EnableCancel)
                                {
                                    <MudButton Class="ma-4"
                                               Variant="@card.Footer.CancelVariant"
                                               Color="@card.Footer.CancelColor"
                                               OnClick="@card.Footer.Cancel_Handler">
                                        @card.Footer.CancelText
                                    </MudButton>
                                }
                                @if (card.Footer.EnableSubmit)
                                {
                                    <MudButton Class="ma-4" Type="Submit"
                                               Variant="@card.Footer.SubmitVariant"
                                               Color="@card.Footer.SubmitColor"
                                               OnClick="@(async (e) => await @card.Footer.Submit_Handler(e))">
                                        @card.Footer.SubmitText
                                    </MudButton>
                                }
                            </div>
                        </MudCardActions>
                    }
                </MudCard>

            </MudItem>
        }
    }
    else
    {
        <MudCard >
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px"/>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudSkeleton Animation="Animation.Wave" Width="40%"/>
                    <MudSkeleton Animation="Animation.Wave" Width="60%"/>
                </CardHeaderContent>
            </MudCardHeader>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="250px"/>
            <MudCardContent>
                <MudSkeleton Animation="Animation.Wave"/>
            </MudCardContent>
            <MudCardActions>
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-2 mb-2"/>
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-3 mb-2"/>
            </MudCardActions>
        </MudCard>
    }

</MudGrid>
    
</MudForm>